import { createReadStream } from "fs";
import { createWriteStream } from "fs";
import fs from "fs/promises";
import zlib from "zlib";
import path from "path";
import { join } from "path";
import showError from "./show-errors.mjs";

export default async function decompressionHub(pathToFile, pathToFolder) {
  async function decompress(output) {
    return new Promise((resolve, reject) => {
      const streamInput = createReadStream(pathToFile);
      const streamOutput = createWriteStream(output);
      const gunzip = zlib.createBrotliDecompress();

      gunzip.on("error", (err) => {
        streamInput.destroy();
        streamOutput.end();
        reject(err);
      });

      streamOutput.on("error", (err) => {
        streamInput.destroy();
        streamOutput.end();
        reject(err);
      });

      gunzip.on("end", () => {
        console.log(`file was successfully decompressed`);
        resolve();
      });

      streamInput.pipe(gunzip).pipe(streamOutput);
    });
  }

  try {
    const checkedFile = await fs.stat(pathToFile);
    const firstFileNameOnly = path.parse(pathToFile).name;

    if (checkedFile.isFile()) {
      try {
        const checkedFolder = await fs.stat(pathToFolder);
        // something that was used as a second argument already exists
        if (checkedFolder.isDirectory()) {
          // User used path to a directory as a second argument and we are autogenerating name
          if (join(pathToFolder, `${firstFileNameOnly}.txt`) === pathToFile) {
            console.log(
              "Operation failed. Autogenerated name is the same as compressed file"
            );
          } else {
            pathToFolder = join(pathToFolder, `${firstFileNameOnly}.txt`);
            await decompress(pathToFolder);
          }
        } else if (checkedFolder.isFile()) {
          if (pathToFile === pathToFolder) {
            console.log(
              "Operation failed. Please, don't decompress the file into itself"
            );
          } else {
            await decompress(pathToFolder);
          }
        }
      } catch (err) {
        // No file or directory was found that was used as a second argument
        if (err !== "ENOENT") {
          await decompress(pathToFolder);
        } else {
          showError(err, "decompression");
        }
      }
    } else if (checkedFile.isDirectory()) {
      console.log(
        "Operation failed. Your are using path to directory as a first argument, not a path to a file"
      );
    } else {
      showError(err, "decompression");
    }
  } catch (err) {
    showError(err, "decompression");
  }
}
